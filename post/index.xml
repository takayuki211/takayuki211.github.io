<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on takayuki211.github.io</title>
    <link>/post/</link>
    <description>Recent content in Posts on takayuki211.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 12 May 2020 09:00:38 +0900</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>データ解析のための統計モデリング入門 3章 メモ</title>
      <link>/post/2020/05/12/%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B5%B1%E8%A8%88%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-3%E7%AB%A0-%E3%83%A1%E3%83%A2/</link>
      <pubDate>Tue, 12 May 2020 09:00:38 +0900</pubDate>
      
      <guid>/post/2020/05/12/%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B5%B1%E8%A8%88%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-3%E7%AB%A0-%E3%83%A1%E3%83%A2/</guid>
      <description>3章 一般化線形モデル（GLM）  Poisson回帰  Poisson分布、リンク関数、線形予測子を組み合わせて統計モデルを構築 まずはデータを見る  plot(d$x, d$y, pch=c(21,19)[d$f]) legend(&amp;#34;topleft&amp;#34;, legend=c(&amp;#34;C&amp;#34;,&amp;#34;T&amp;#34;), pch=c(21,19))  説明変数 $x_i$ 応答変数 $y_i$ として統計モデルを作る  $y_i$はポアソン分布に従うと仮定 $$p(y_i | \lambda_i)=\frac{\lambda_i^{y_i}\exp(-\lambda_i)}{y_i!}$$ 平均種子数 $\lambda_i$ について $$\lambda_i = \exp(\beta_1 + \beta_2x_i)$$ $$ \log\lambda_i = \beta_1 + \beta_2x_i $$ $\beta_1 + \beta_2x_i$ は線形予測子という。 $\log(\lambda)$ はリンク関数という。この場合は対数リンク関数。 ポアソン回帰の場合はたいてい対数リンク関数を使う。ロジスティック回帰（二項分布）にはロジットリンク関数を使う。これらは正準リンク関数と呼ばれている。 尤度は $$ L(\lambda)=\prod p(y|\lambda) $$ で、$\lambda_i$は $\beta_1$ と $\beta_2$ の関数だから、対数尤度は $$ \log L(\beta_1 , \beta_2) = \sum_i \log \frac{\lambda_i^{y_i} \exp(-\lambda_i)}{y_i !} $$ RでGLMのFittingをするコード fit &amp;lt;- glm(y ~ x, data=d, family=poisson) print(fit) summary(fit) logLik(fit)  intercept：切片 $\beta_1$ x：説明変数xの係数 $\beta_2$ z value：Wald統計量。最尤推定値をSEで除算した値。Wald信頼区間を構成して、推定値がゼロから離れているかの目安。 $Pr(&amp;gt;|z|)$ ：glm()では、平均が $|z|$ 、標準偏差1の正規分布におけるマイナス無限大からゼロまでの値をとる確率の2倍。   最大対数尤度=あてはまりの良さ。 logLik(fit) で計算出来て、自由度（パラメータ数）も出る。   予測 plot(d$x, d$y, pch=c(21,19)[d$f]) xx &amp;lt;- seq(min(d$x), max(d$x), length=100) lines(xx, exp(1.</description>
    </item>
    
    <item>
      <title>AtCoder環境構築</title>
      <link>/post/2020/05/12/atcoder%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</link>
      <pubDate>Tue, 12 May 2020 08:46:45 +0900</pubDate>
      
      <guid>/post/2020/05/12/atcoder%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</guid>
      <description>Install npm install -g atcoder-cli pip3 install --user online-judge-tools acc config default-template cpp 以下のフォルダ内にテンプレートを作成する。main.cppのようなテンプレートファイルも入れる。
 /Users/takayuki/Library/Preferences/atcoder-cli-nodejs  例
 /Users/takayuki/Library/Preferences/atcoder-cli-nodejs/cpp/template.json  acc config default-test-dirname-format test Login acc login oj login  コンペのフォルダを作成する acc new abc162 問題を解く A問題の場合
cd a  main.cppを編集  oj test acc submit main.cpp 以下同様に続ける
 参考サイト http://tatamo.81.la/blog/2018/12/07/atcoder-cli-tutorial/ https://shiopon.hatenablog.jp/entry/2020/01/16/182901</description>
    </item>
    
  </channel>
</rss>