<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on takayuki211.github.io</title>
    <link>/</link>
    <description>Recent content in Home on takayuki211.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 01 Jun 2020 22:01:41 +0900</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pythonのライブラリメモ</title>
      <link>/post/2020/06/01/python%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%A1%E3%83%A2/</link>
      <pubDate>Mon, 01 Jun 2020 22:01:41 +0900</pubDate>
      
      <guid>/post/2020/06/01/python%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%A1%E3%83%A2/</guid>
      <description>PythonでAtCoderを始め、C++に移行しようかと悩んだものの、処理速度にさえ気をつければ十分に戦えそうな雰囲気を感じている今日このごろ。よく使うライブラリの使い方をメモしておく。頭が混乱してきたときにチラ見するためのチートシートでもある。
※注：サンプルコードは様々なサイトから寄せ集めてきたコピペである。
collections defaultdict キー全てに対して初期化されたDict。引数には初期化の関数を入れる。intと書くとint()で初期化したことになる。
from collections import defaultdict d = defaultdict(int) print(d[0]) # -&amp;gt; 0 # ネストすると2次元配列のように扱うこともできる d2 = defaultdict(lambda: defaultdict(int)) d2[0][0] = 1 d2[0][1] += 3 print(d2[0][0]) # -&amp;gt; 1 print(d2[0][1]) # -&amp;gt; 3 print(d2[0][2]) # -&amp;gt; 0 listやnumpy.arrayの二次元配列との処理速度比較もしてみたいところ。
OrderedDict 順序をもったDict。
from collections import OrderedDict # OrderedDictの生成 od = OrderedDict() od[&amp;#39;k1&amp;#39;] = 1 od[&amp;#39;k2&amp;#39;] = 2 od[&amp;#39;k3&amp;#39;] = 3 print(od) # -&amp;gt; OrderedDict([(&amp;#39;k1&amp;#39;, 1), (&amp;#39;k2&amp;#39;, 2), (&amp;#39;k3&amp;#39;, 3)]) # 位置を変更する od.</description>
    </item>
    
    <item>
      <title>部分和問題（ビット全探索）</title>
      <link>/post/2020/05/20/%E9%83%A8%E5%88%86%E5%92%8C%E5%95%8F%E9%A1%8C%E3%83%93%E3%83%83%E3%83%88%E5%85%A8%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Wed, 20 May 2020 17:45:00 +0900</pubDate>
      
      <guid>/post/2020/05/20/%E9%83%A8%E5%88%86%E5%92%8C%E5%95%8F%E9%A1%8C%E3%83%93%E3%83%83%E3%83%88%E5%85%A8%E6%8E%A2%E7%B4%A2/</guid>
      <description>課題意識 最近AtCoderを始めたが（正確に言うと、以前一度やり始めて、放置していた。今回こそは続ける。）、組み合わせについてfor文で計算するにあたってシフト演算を利用する方法があることを知ったのでメモしておく。
 ABC045 C - たくさんの数式 https://atcoder.jp/contests/abc045/tasks/arc061_a
 入力されたテキストのどこに+(コードではアンダースコア)を挿入するべきか、という問題として捉えた。
(1)で1&amp;lt;&amp;lt;nとしているが、これは1をn桁シフトしている。n=3のとき、1&amp;laquo;3となり、これは2進数表記では1000となる（10進数の9として処理される）。forループはこの数未満の回数となるから、8回ループが回ることになる。
(2)において桁数でループする。例えばn=3では、000~111の場合を計算したい。この場合、3桁を調べれば良い。
(3)k桁目が1である場合に処理を行うこととしている。これによって、組み合わせをバイナリな表現によって処理している。
こちらのQiitaページを見るに、競プロ初心者向け問題では頻出の模様。ビット演算の他に、再帰関数でも解けるとのこと。（計算間に合うのかな？）
 ビット演算 https://qiita.com/drken/items/7c6ff2aa4d8fce1c9361 再帰関数 https://qiita.com/drken/items/23a4f604fa3f505dd5ad  次回から上記Qiitaページの問題を順に解いていこう。 手始めに、いくつか関連問題も解いてみる。
 ABC079 C - Train Ticket https://atcoder.jp/contests/abc079/tasks/abc079_c
  ABC104 C - All Green https://atcoder.jp/contests/abc104/tasks/abc104_c
・・・。これはもはやビット演算と関係ないのではないか？ タイトルにつけた「部分和問題」、恥ずかしながら知りませんでした。どうやら頻出問題で、DPで解くこともできるらしい。
→　Youtubeの解説を閲覧。 https://youtu.be/DEGyESFF8iE?t=1425
なるほど、問題ごとにボーナス点を取る・取らないの組み合わせが決まると、他に解くべき問題とその数は自動的に決まってくる。得点が高い問題から目標得点になるまで解いていけば良いから。したがって上の問題と同じようにバイナリで考えれば良い。やり方をカンニングした上でコードを書く。
 配列等のアライメントの難易度が高い。 どうにかコードを書いたものの、果たしてこれを制限時間内に解けるだろうか。
次回に続く。</description>
    </item>
    
    <item>
      <title>部分和問題（ビット全探索）</title>
      <link>/post/2020/05/20/%E9%83%A8%E5%88%86%E5%92%8C%E5%95%8F%E9%A1%8C%E3%83%93%E3%83%83%E3%83%88%E5%85%A8%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Wed, 20 May 2020 17:45:00 +0900</pubDate>
      
      <guid>/post/2020/05/20/%E9%83%A8%E5%88%86%E5%92%8C%E5%95%8F%E9%A1%8C%E3%83%93%E3%83%83%E3%83%88%E5%85%A8%E6%8E%A2%E7%B4%A2/</guid>
      <description>課題意識 最近AtCoderを始めたが（正確に言うと、以前一度やり始めて、放置していた。今回こそは続ける。）、組み合わせについてfor文で計算するにあたってシフト演算を利用する方法があることを知ったのでメモしておく。
 ABC045 C - たくさんの数式 https://atcoder.jp/contests/abc045/tasks/arc061_a
 入力されたテキストのどこに+(コードではアンダースコア)を挿入するべきか、という問題として捉えた。
(1)で1&amp;lt;&amp;lt;nとしているが、これは1をn桁シフトしている。n=3のとき、1&amp;laquo;3となり、これは2進数表記では1000となる（10進数の9として処理される）。forループはこの数未満の回数となるから、8回ループが回ることになる。
(2)において桁数でループする。例えばn=3では、000~111の場合を計算したい。この場合、3桁を調べれば良い。
(3)k桁目が1である場合に処理を行うこととしている。これによって、組み合わせをバイナリな表現によって処理している。
こちらのQiitaページを見るに、競プロ初心者向け問題では頻出の模様。ビット演算の他に、再帰関数でも解けるとのこと。（計算間に合うのかな？）
 ビット演算 https://qiita.com/drken/items/7c6ff2aa4d8fce1c9361 再帰関数 https://qiita.com/drken/items/23a4f604fa3f505dd5ad  次回から上記Qiitaページの問題を順に解いていこう。 手始めに、いくつか関連問題も解いてみる。
 ABC079 C - Train Ticket https://atcoder.jp/contests/abc079/tasks/abc079_c
  ABC104 C - All Green https://atcoder.jp/contests/abc104/tasks/abc104_c
・・・。これはもはやビット演算と関係ないのではないか？ タイトルにつけた「部分和問題」、恥ずかしながら知りませんでした。どうやら頻出問題で、DPで解くこともできるらしい。
→　Youtubeの解説を閲覧。 https://youtu.be/DEGyESFF8iE?t=1425
なるほど、問題ごとにボーナス点を取る・取らないの組み合わせが決まると、他に解くべき問題とその数は自動的に決まってくる。得点が高い問題から目標得点になるまで解いていけば良いから。したがって上の問題と同じようにバイナリで考えれば良い。やり方をカンニングした上でコードを書く。
 配列等のアライメントの難易度が高い。 どうにかコードを書いたものの、果たしてこれを制限時間内に解けるだろうか。
次回に続く。</description>
    </item>
    
    <item>
      <title>「データ解析のための統計モデリング入門」メモ - 3章</title>
      <link>/post/2020/05/12/%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B5%B1%E8%A8%88%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%E3%83%A1%E3%83%A2-3%E7%AB%A0/</link>
      <pubDate>Tue, 12 May 2020 09:00:38 +0900</pubDate>
      
      <guid>/post/2020/05/12/%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B5%B1%E8%A8%88%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%E3%83%A1%E3%83%A2-3%E7%AB%A0/</guid>
      <description>一般化線形モデル（GLM）  Poisson回帰  Poisson分布、リンク関数、線形予測子を組み合わせて統計モデルを構築 まずはデータを見る  plot(d$x, d$y, pch=c(21,19)[d$f]) legend(&amp;#34;topleft&amp;#34;, legend=c(&amp;#34;C&amp;#34;,&amp;#34;T&amp;#34;), pch=c(21,19))  説明変数 $x_i$ 応答変数 $y_i$ として統計モデルを作る  $y_i$はポアソン分布に従うと仮定 $$p(y_i | \lambda_i)=\frac{\lambda_i^{y_i}\exp(-\lambda_i)}{y_i!}$$ 平均種子数 $\lambda_i$ について $$\lambda_i = \exp(\beta_1 + \beta_2x_i)$$ $$ \log\lambda_i = \beta_1 + \beta_2x_i $$ $\beta_1 + \beta_2x_i$ は線形予測子という。 $\log(\lambda)$ はリンク関数という。この場合は対数リンク関数。 ポアソン回帰の場合はたいてい対数リンク関数を使う。ロジスティック回帰（二項分布）にはロジットリンク関数を使う。これらは正準リンク関数と呼ばれている。 尤度は $$ L(\lambda)=\prod p(y|\lambda) $$ で、$\lambda_i$は $\beta_1$ と $\beta_2$ の関数だから、対数尤度は $$ \log L(\beta_1 , \beta_2) = \sum_i \log \frac{\lambda_i^{y_i} \exp(-\lambda_i)}{y_i !} $$ RでGLMのFittingをするコード fit &amp;lt;- glm(y ~ x, data=d, family=poisson) print(fit) summary(fit) logLik(fit)  intercept：切片 $\beta_1$ x：説明変数xの係数 $\beta_2$ z value：Wald統計量。最尤推定値をSEで除算した値。Wald信頼区間を構成して、推定値がゼロから離れているかの目安。 $Pr(&amp;gt;|z|)$ ：glm()では、平均が $|z|$ 、標準偏差1の正規分布におけるマイナス無限大からゼロまでの値をとる確率の2倍。   最大対数尤度=あてはまりの良さ。 logLik(fit) で計算出来て、自由度（パラメータ数）も出る。   予測 plot(d$x, d$y, pch=c(21,19)[d$f]) xx &amp;lt;- seq(min(d$x), max(d$x), length=100) lines(xx, exp(1.</description>
    </item>
    
    <item>
      <title>AtCoder環境構築</title>
      <link>/post/2020/05/12/atcoder%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</link>
      <pubDate>Tue, 12 May 2020 08:46:45 +0900</pubDate>
      
      <guid>/post/2020/05/12/atcoder%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</guid>
      <description>Install npm install -g atcoder-cli pip3 install --user online-judge-tools acc config default-template cpp 以下のフォルダ内にテンプレートを作成する。main.cppのようなテンプレートファイルも入れる。
 /Users/takayuki/Library/Preferences/atcoder-cli-nodejs  例
 /Users/takayuki/Library/Preferences/atcoder-cli-nodejs/cpp/template.json  acc config default-test-dirname-format test Login acc login oj login  コンペのフォルダを作成する acc new abc162 問題を解く A問題の場合
cd a  main.cppを編集  oj test acc submit main.cpp 以下同様に続ける
 参考サイト  http://tatamo.81.la/blog/2018/12/07/atcoder-cli-tutorial/ https://shiopon.hatenablog.jp/entry/2020/01/16/182901  </description>
    </item>
    
    <item>
      <title>About Hugo XMin</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>XMin is the first Hugo theme I have designed. The original reason that I wrote it was I needed a minimal example of Hugo themes when I was writing the blogdown book. Basically I wanted a simple theme that supports a navigation menu, a home page, other single pages, lists of pages, blog posts, categories, tags, and RSS. That is all. Nothing fancy. In terms of CSS and JavaScript, I really want to keep them minimal.</description>
    </item>
    
  </channel>
</rss>